// Insertion, MIN, MAX, Inorder traversal
#include<stdio.h>
#include<stdlib.h>

struct Node
{
	int data;
	struct Node* left;
	struct Node* right;
};

struct Node* new_Node (int item){
	struct Node* temp = (struct Node*)malloc(sizeof(struct Node));
	temp -> data = item;
	temp -> left = NULL;
	temp -> right = NULL;
	return temp;
}

void inorder_traversal(struct Node* root){
	if(root != NULL){
		inorder_traversal(root->left);
		printf("%d ",root->data);
		inorder_traversal(root->right);
	}
}

struct Node* insert(struct Node* temp,int key){
	if(temp == NULL){
		return new_Node(key);
	}
	if(key < temp->data){
		temp -> left = insert(temp->left,key);
	}
	else{
		temp -> right = insert(temp->right,key);
	}
	return temp;
}

int search(struct Node* temp,int key){
	if(temp == NULL) return -1;
	else if(key == temp -> data) return 1;
	else if(key <= temp-> data) return search(temp -> left,key);
	else return search(temp -> right,key);
}

void max_element(struct Node* temp){
	if(temp == NULL){
		printf("Empty\n");
		return;
	}
	while(temp -> right != NULL){
		temp = temp -> right;
	}
	printf("%d\n",temp -> data);
}

void min_element(struct Node* temp){
	if(temp == NULL) {
		printf("Empty\n");
		return;
	}
	while(temp -> left != NULL){
		temp = temp -> left;
	}
	printf("%d\n",temp -> data);
}

int main(){
	struct Node* root = NULL;
	int key,n,i;
	printf("Enter value of n: \n");
	scanf("%d",&n);
	printf("Enter value of keys: \n");
	scanf("%d",&key);
	root = insert(root,key);
	for(i=1;i<n;i++){
		scanf("%d",&key);
		insert(root,key);
	}
	printf("Inorder Traversal:\n");
	inorder_traversal(root);
	printf("\n");

	printf("Max: ");
	max_element(root);
	printf("Min: ");
	min_element(root);

	printf("Enter key to search: \n");
	scanf("%d",&key);
	if(search(root,key)==1) printf("Found\n");
	else printf("Not Found\n");

	return 0;
}
